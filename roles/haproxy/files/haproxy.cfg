global
	# to have these messages end up in /var/log/haproxy.log you will
	# need to:
	#
	# 1) configure syslog to accept network log events.  This is done
	#    by adding the '-r' option to the SYSLOGD_OPTIONS in
	#    /etc/sysconfig/syslog
	#
	# 2) configure local2 events to go to the /var/log/haproxy.log
	#   file. A line like the following can be added to
	#   /etc/sysconfig/syslog
	#
	#    local2.*                       /var/log/haproxy.log
	#
	log         127.0.0.1 local2
	chroot      /var/lib/haproxy
	pidfile     /var/run/haproxy.pid
	user        haproxy
	group       haproxy
	daemon

	# turn on stats unix socket
	stats socket ipv4@127.0.0.1:51415 level admin
	stats timeout 2m
#sfdsfsfsdf
#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
	mode http
	log global
	no option dontlognull
	option splice-auto
	option http-keep-alive
	option redispatch
	retries 3
	# disconnect slow handshake clients early, protect from
	# resources exhaustion attacks
	timeout http-request    5s
	timeout queue           1m
	timeout connect         5s
	timeout client          1m
	timeout server          1m
	timeout http-keep-alive 10s
	timeout check           10s
	maxconn                 100000

# frontend used to return health status without requiring SSL
frontend haproxy_status
	bind 0.0.0.0:34180	# 34180 means EALTH ;)
	log-format [%pid]\ [%Ts.%ms]\ %ac/%fc/%bc/%bq/%sc/%sq/%rc\ %Tq/%Tw/%Tc/%Tr/%Tt\ %tsc\ %ci:%cp\ %fi:%fp\ %si:%sp\ %ft\ %sslc\ %sslv\ %{+Q}r\ %ST\ %b:%s\ "%CC"\ "%hr"\ "%CS"\ "%hs"\ req_size=%U\ resp_size=%B
	# create a status URI in /haproxy_status that will return
	# a 200 is backend is healthy, and 503 if it isn't. This 
	# URI is queried by the ELB.
	acl backend_dead nbsrv(fxa-nodejs) lt 1
	monitor-uri /haproxy_status
	monitor fail if backend_dead

	# reject non status requests
	#acl status_req path /haproxy_status
	#tcp-request content reject if ! status_req
	default_backend fxa-nodejs

# main frontend with SSL and PROXY protocol
frontend fxa-https
	bind 0.0.0.0:443 accept-proxy ssl crt /etc/haproxy/bundle.pem ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK

	# Blacklist: Deny access to some IPs before anything else is checked
	tcp-request content reject if { src -f /etc/haproxy/blacklist.lst }

	# Whitelist: Allow IPs to bypass the filters
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]whitelisted, if { src -f /etc/haproxy/whitelist.lst }
	http-request allow if { src -f /etc/haproxy/whitelist.lst }

	# ~~~ Requests validation using ACLs ~~~
	# block requests that don't match the predefined endpoints
	acl valid-get path -f /etc/haproxy/get_endpoints.lst
	acl valid-post path -f /etc/haproxy/post_endpoints.lst
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]invalid-endpoint, unless METH_GET valid-get or METH_POST valid-post

	# block requests on verify_email that do not have the correct params
	acl endpoint-verify_email path /v1/verify_email
	acl param-code urlp_reg(code) [0-9a-fA-F]{1,32}
	acl param-uid urlp_reg(uid) [0-9a-fA-F]{1,32}
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]invalid-parameters, if endpoint-verify_email !param-code or endpoint-verify_email !param-uid

	# block requests on complete_reset_password that do not have the correct params
	acl endpoint-complete_reset_password path /v1/complete_reset_password
	acl param-email urlp_reg(email) -i ^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$
	acl param-token urlp_reg(token) [0-9a-fA-F]{1,64}
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]invalid-parameters, if endpoint-complete_reset_password !param-email or endpoint-complete_reset_password !param-token or endpoint-complete_reset_password !param-code

	# block content-length larger than 500kB
	acl request-too-big hdr_val(content-length) gt 5000
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]request-too-big, if METH_POST request-too-big

	# ~~~ DDoS protection ~~~
	# HAproxy tracks client IPs into a global stick table. Each IP is
	# stored for a limited amount of time, with several counters attached
	# to it. When a new connection comes in, the stick table is evaluated
	# to verify that the new connection from this client is allowed to
	# continue.

	# enable tracking of counters for src ip in the default stick-table
	tcp-request content track-sc0 src

	# Stick Table Definitions
	#  - conn_cur: count active connections
	#  - conn_rate(10s): average incoming connection rate over 10 seconds
	#  - http_req_rate(10s): Monitors the number of request sent by an IP over a period of 10 seconds
	#  - http_err_rate(10s): Monitors the number of errors generated by an IP over a period of 10 seconds
	stick-table type ip size 500k expire 30s store conn_cur,conn_rate(10s),http_req_rate(10s),http_err_rate(10s)

	# Reject the new connection if the client already has 100 opened
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]over-100-active-connections, if { src_conn_cur ge 100 }

	# Reject the new connection if the client has opened more than 100 connections in 10 seconds
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]over-100-connections-in-10-seconds, if { src_conn_rate ge 100 }

	# Reject the connection if the client has passed the HTTP error rate
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]high-error-rate, if { sc0_http_err_rate() gt 100 }

	# Reject the connection if the client has passed the HTTP request rate
	http-request add-header X-Haproxy-ACL %[req.fhdr(X-Haproxy-ACL,-1)]high-request-rate, if { sc0_http_req_rate() gt 500 }
	
	# ~~~ Logging ~~~
	# Insert a unique request identifier is the headers of the request
	# passed to the backend
	unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
	unique-id-header X-Unique-ID

	# Add the X-Forwarded-For header
	option forwardfor except 127.0.0.0/8

	# Don't log here, log into logger frontend
	no log
	default_backend logger

backend logger
	server localhost localhost:55555 send-proxy

# frontend use to log acl activity
frontend logger
	bind localhost:55555 accept-proxy
	log-format [%pid]\ [%Ts.%ms]\ %ac/%fc/%bc/%bq/%sc/%sq/%rc\ %Tq/%Tw/%Tc/%Tr/%Tt\ %tsc\ %ci:%cp\ %fi:%fp\ %si:%sp\ %ft\ %sslc\ %sslv\ %{+Q}r\ %ST\ %b:%s\ "%CC"\ "%hr"\ "%CS"\ "%hs"\ ireq_size=%U\ resp_size=%B
	capture request header Referrer len 64
    capture request header Content-Length len 10
	capture request header User-Agent len 64
	capture request header X-Haproxy-ACL len 256
	capture request header X-Unique-ID len 64

	# if previous ACL didn't pass, and IP isn't whitelisted, block the request
	acl whitelisted req.fhdr(X-Haproxy-ACL) -m beg whitelisted,
	acl fail-validation req.fhdr(X-Haproxy-ACL) -m found
	http-request deny if !whitelisted fail-validation

	default_backend fxa-nodejs

backend fxa-nodejs
	# Remove the ACL header, it's not useful to NodeJS
	reqdel ^X-Haproxy-ACL
	option httpchk GET /__heartbeat__ HTTP/1.0
	http-check expect status 200
	server nodejs1 localhost:8000 check inter 1000
